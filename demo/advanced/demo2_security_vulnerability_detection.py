"""
GitHub Copilot Advanced Demo 2: AI-Based Vulnerability Detection
===============================================================

This demo showcases GitHub Copilot's advanced security features:
- Real-time vulnerability detection and prevention
- AI-driven security suggestions
- Secure coding pattern recommendations
- Automatic fixing of common security issues

Demo Scenario: Web Application with Common Security Vulnerabilities
- Intentionally vulnerable code patterns
- Watch Copilot detect and suggest fixes
- Demonstrate proactive security recommendations

üéØ Use this demo to show how Copilot prevents security issues before they happen!
"""

import os
import sqlite3
import hashlib
import requests
from flask import Flask, request, jsonify
import jwt

app = Flask(__name__)

# ‚ùå INTENTIONALLY VULNERABLE CODE - Copilot will flag these issues
# ================================================================

# 1. Hardcoded secrets (Copilot will detect and suggest environment variables)
SECRET_KEY = "hardcoded-secret-key-12345"  # Copilot will flag this
DATABASE_PASSWORD = "admin123"  # Copilot will suggest env vars
API_KEY = "sk-1234567890abcdef"  # Copilot will warn about exposed keys

# 2. SQL Injection vulnerability (Copilot will suggest parameterized queries)
def get_user_by_id_vulnerable(user_id):
    """
    ‚ùå SQL Injection vulnerability
    Ask Copilot to fix this function - it will suggest parameterized queries
    """
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    # Vulnerable: Direct string concatenation
    query = f"SELECT * FROM users WHERE id = {user_id}"  # Copilot will flag this
    cursor.execute(query)

    result = cursor.fetchone()
    conn.close()
    return result

# 3. Weak password hashing (Copilot will suggest bcrypt or similar)
def hash_password_weak(password):
    """
    ‚ùå Weak hashing algorithm
    Copilot will suggest using bcrypt, scrypt, or Argon2
    """
    return hashlib.md5(password.encode()).hexdigest()  # Copilot will flag this

# 4. Insecure HTTP requests (Copilot will suggest SSL verification)
def make_api_request_insecure(url, data):
    """
    ‚ùå Insecure HTTP request
    Copilot will suggest enabling SSL verification
    """
    response = requests.post(url, data=data, verify=False)  # Copilot will flag this
    return response.json()

# 5. JWT without proper validation (Copilot will suggest validation)
def decode_jwt_insecure(token):
    """
    ‚ùå JWT decoded without verification
    Copilot will suggest proper signature verification
    """
    decoded = jwt.decode(token, options={"verify_signature": False})  # Copilot will flag this
    return decoded

# 6. Path traversal vulnerability (Copilot will suggest path validation)
@app.route('/download/<filename>')
def download_file_vulnerable(filename):
    """
    ‚ùå Path traversal vulnerability
    Copilot will suggest path validation and sandboxing
    """
    file_path = f"./uploads/{filename}"  # Copilot will flag potential path traversal
    with open(file_path, 'r') as file:  # No validation - Copilot will warn
        return file.read()

# 7. Insufficient input validation (Copilot will suggest validation)
@app.route('/api/user', methods=['POST'])
def create_user_vulnerable():
    """
    ‚ùå No input validation
    Copilot will suggest input validation and sanitization
    """
    data = request.get_json()
    # No validation - Copilot will suggest validation
    username = data['username']  # Potential KeyError - Copilot will flag
    email = data['email']        # No email validation - Copilot will suggest regex/validator

    return jsonify({"status": "User created", "username": username})

# 8. Information disclosure (Copilot will suggest error handling)
@app.route('/api/debug')
def debug_info_vulnerable():
    """
    ‚ùå Information disclosure
    Copilot will suggest removing debug info in production
    """
    try:
        result = some_database_operation()
    except Exception as e:
        # Exposes internal details - Copilot will flag this
        return jsonify({"error": str(e), "traceback": str(e.__traceback__)})

# ‚úÖ COPILOT WILL SUGGEST THESE SECURE ALTERNATIVES
# =================================================

"""
üéØ DEMO INSTRUCTIONS FOR PRESENTER:

1. **Start with the vulnerable code above**
2. **Open Copilot Chat and ask**:
   "Review this code for security vulnerabilities and fix them"

3. **Expected Copilot Responses**:

   a) **Hardcoded Secrets**:
      - Suggests using environment variables
      - Recommends dotenv or similar solutions
      - May suggest Azure Key Vault or AWS Secrets Manager

   b) **SQL Injection**:
      - Suggests parameterized queries
      - Recommends using ORMs like SQLAlchemy
      - Shows proper escaping techniques

   c) **Weak Cryptography**:
      - Suggests bcrypt, scrypt, or Argon2
      - Shows proper salt generation
      - Recommends secure random number generation

   d) **Insecure HTTP**:
      - Enables SSL verification
      - Suggests certificate pinning
      - Recommends timeout settings

   e) **JWT Issues**:
      - Adds signature verification
      - Suggests proper algorithm specification
      - Recommends token expiration

   f) **Path Traversal**:
      - Adds path validation
      - Suggests using os.path.normpath
      - Recommends sandboxing techniques

   g) **Input Validation**:
      - Adds comprehensive validation
      - Suggests using libraries like marshmallow
      - Shows proper error handling

4. **Ask follow-up questions**:
   - "What other security measures should I add?"
   - "How can I prevent CSRF attacks?"
   - "What about rate limiting and DDoS protection?"

5. **Demonstrate real-time detection**:
   - Start typing vulnerable code
   - Show how Copilot suggests secure alternatives immediately
   - Highlight the proactive security suggestions
"""

# Sample prompts to use during the demo:
SECURITY_DEMO_PROMPTS = [
    "Fix all security vulnerabilities in this code",
    "Add proper authentication and authorization",
    "Implement secure session management",
    "Add input validation and sanitization",
    "Implement proper error handling without information disclosure",
    "Add logging for security events",
    "Implement rate limiting and DDoS protection",
    "Add HTTPS enforcement and security headers",
    "Implement secure file upload handling",
    "Add comprehensive security testing"
]

# Real-time vulnerability detection examples:
VULNERABILITY_PATTERNS = {
    "hardcoded_secrets": "Copilot detects: API keys, passwords, tokens in code",
    "sql_injection": "Copilot detects: String concatenation in SQL queries",
    "weak_crypto": "Copilot detects: MD5, SHA1, weak random number generation",
    "insecure_http": "Copilot detects: verify=False, insecure protocols",
    "path_traversal": "Copilot detects: User input in file paths",
    "command_injection": "Copilot detects: User input in system commands",
    "xss_vulnerabilities": "Copilot detects: Unescaped user input in HTML",
    "deserialization": "Copilot detects: Unsafe pickle, eval() usage"
}

if __name__ == "__main__":
    print("üîí GitHub Copilot Security Demo")
    print("================================")
    print("This file contains intentionally vulnerable code.")
    print("Use Copilot Chat to identify and fix security issues!")
    print("\nüéØ Try asking Copilot:")
    for prompt in SECURITY_DEMO_PROMPTS[:3]:
        print(f"   ‚Ä¢ {prompt}")
