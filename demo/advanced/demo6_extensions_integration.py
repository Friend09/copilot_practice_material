"""
GitHub Copilot Advanced Demo 6: Extensions & Tool Integration
============================================================

This demo showcases GitHub Copilot's integration with external tools and extensions:
- Copilot Extensions with Docker, Postman, and other tools
- Natural language interface to external services
- Automated deployment and testing workflows
- Integration with cloud services and APIs
- Multi-tool orchestration for complex tasks

Demo Scenario: DevOps Pipeline Integration
- Use natural language to control Docker containers
- Generate and run API tests with Postman integration
- Deploy applications with cloud provider extensions
- Monitor and debug with observability tools

🎯 This demo shows how Copilot becomes your universal developer assistant!
"""

import json
import yaml
import subprocess
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from datetime import datetime
import requests
import os

# ============================================================================
# COPILOT EXTENSIONS DEMONSTRATION SETUP
# ============================================================================

@dataclass
class ExtensionCommand:
    """Represents a command that can be executed via Copilot extensions"""
    extension: str
    action: str
    parameters: Dict[str, Any]
    description: str

@dataclass
class DeploymentConfig:
    """Configuration for application deployment"""
    app_name: str
    environment: str
    image_tag: str
    replicas: int = 1
    resources: Dict[str, str] = None

# ============================================================================
# DOCKER EXTENSION INTEGRATION
# ============================================================================

class DockerIntegration:
    """
    Demonstrates Docker extension capabilities with Copilot
    Natural language commands get translated to Docker operations
    """

    def __init__(self):
        self.containers = []
        self.images = []

    def generate_dockerfile(self, app_type: str, requirements: List[str]) -> str:
        """
        Generate Dockerfile based on application requirements

        🎯 Demo Prompt: "Create a Dockerfile for a Python Flask API with Redis"
        Copilot will understand the requirements and generate appropriate Dockerfile
        """
        dockerfile_templates = {
            "python_flask": """
# Generated by Copilot Docker Extension
FROM python:3.11-slim

WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\
    CMD curl -f http://localhost:5000/health || exit 1

# Run application
CMD ["python", "app.py"]
""",
            "node_express": """
# Generated by Copilot Docker Extension
FROM node:18-alpine

WORKDIR /app

# Copy package files
COPY package*.json ./
RUN npm ci --only=production

# Copy application
COPY . .

EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\
    CMD curl -f http://localhost:3000/health || exit 1

CMD ["npm", "start"]
"""
        }

        return dockerfile_templates.get(app_type, "# Custom Dockerfile needed")

    def generate_docker_compose(self, services: List[str]) -> str:
        """
        Generate docker-compose.yml for multi-service applications

        🎯 Demo Prompt: "Create docker-compose for web app with database and Redis"
        """
        compose_template = """
# Generated by Copilot Docker Extension
version: '3.8'

services:
  web:
    build: .
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=postgresql://user:pass@db:5432/myapp
      - REDIS_URL=redis://redis:6379
    depends_on:
      - db
      - redis
    networks:
      - app-network

  db:
    image: postgres:15
    environment:
      POSTGRES_DB: myapp
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
"""
        return compose_template

# ============================================================================
# POSTMAN/API TESTING EXTENSION INTEGRATION
# ============================================================================

class PostmanIntegration:
    """
    Demonstrates Postman extension for API testing with Copilot
    Natural language test descriptions become automated test suites
    """

    def generate_api_tests(self, api_spec: Dict[str, Any]) -> Dict[str, Any]:
        """
        Generate Postman collection from API specification

        🎯 Demo Prompt: "Create comprehensive API tests for user authentication endpoints"
        """
        postman_collection = {
            "info": {
                "name": "API Test Suite - Generated by Copilot",
                "description": "Comprehensive API tests created via natural language",
                "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
            },
            "item": [
                {
                    "name": "User Authentication",
                    "item": [
                        {
                            "name": "Register New User",
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": json.dumps({
                                        "username": "testuser",
                                        "email": "test@example.com",
                                        "password": "securepassword123"
                                    })
                                },
                                "url": {
                                    "raw": "{{base_url}}/api/register",
                                    "host": ["{{base_url}}"],
                                    "path": ["api", "register"]
                                }
                            },
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('Status code is 201', function () {",
                                            "    pm.response.to.have.status(201);",
                                            "});",
                                            "",
                                            "pm.test('Response contains user ID', function () {",
                                            "    const jsonData = pm.response.json();",
                                            "    pm.expect(jsonData).to.have.property('user_id');",
                                            "    pm.globals.set('user_id', jsonData.user_id);",
                                            "});"
                                        ]
                                    }
                                }
                            ]
                        }
                    ]
                }
            ],
            "variable": [
                {
                    "key": "base_url",
                    "value": "http://localhost:5000"
                }
            ]
        }

        return postman_collection

    def generate_performance_tests(self, endpoints: List[str]) -> str:
        """
        Generate performance test scenarios

        🎯 Demo Prompt: "Create load tests for critical API endpoints"
        """
        k6_script = """
// Generated by Copilot Postman Extension
import http from 'k6/http';
import { check, sleep } from 'k6';

export let options = {
    stages: [
        { duration: '2m', target: 100 }, // Ramp up
        { duration: '5m', target: 100 }, // Stay at 100 users
        { duration: '2m', target: 200 }, // Ramp up to 200 users
        { duration: '5m', target: 200 }, // Stay at 200 users
        { duration: '2m', target: 0 },   // Ramp down
    ],
    thresholds: {
        http_req_duration: ['p(95)<500'], // 95% of requests under 500ms
        http_req_failed: ['rate<0.1'],    // Error rate under 10%
    },
};

export default function() {
    // Test user registration
    let registerPayload = JSON.stringify({
        username: `user_${__VU}_${__ITER}`,
        email: `user_${__VU}_${__ITER}@example.com`,
        password: 'testpassword123'
    });

    let params = {
        headers: { 'Content-Type': 'application/json' },
    };

    let response = http.post('${BASE_URL}/api/register', registerPayload, params);

    check(response, {
        'registration status is 201': (r) => r.status === 201,
        'registration response time < 500ms': (r) => r.timings.duration < 500,
    });

    sleep(1);
}
"""
        return k6_script

# ============================================================================
# CLOUD PROVIDER EXTENSIONS (AWS/Azure/GCP)
# ============================================================================

class CloudIntegration:
    """
    Demonstrates cloud provider extensions for deployment automation
    """

    def generate_kubernetes_manifest(self, app_config: DeploymentConfig) -> str:
        """
        Generate Kubernetes deployment manifests

        🎯 Demo Prompt: "Deploy my Flask app to Kubernetes with auto-scaling"
        """
        k8s_manifest = f"""
# Generated by Copilot Cloud Extension
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {app_config.app_name}
  namespace: {app_config.environment}
  labels:
    app: {app_config.app_name}
    environment: {app_config.environment}
spec:
  replicas: {app_config.replicas}
  selector:
    matchLabels:
      app: {app_config.app_name}
  template:
    metadata:
      labels:
        app: {app_config.app_name}
    spec:
      containers:
      - name: {app_config.app_name}
        image: {app_config.image_tag}
        ports:
        - containerPort: 5000
        env:
        - name: ENVIRONMENT
          value: "{app_config.environment}"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: {app_config.app_name}-service
  namespace: {app_config.environment}
spec:
  selector:
    app: {app_config.app_name}
  ports:
  - protocol: TCP
    port: 80
    targetPort: 5000
  type: LoadBalancer
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {app_config.app_name}-hpa
  namespace: {app_config.environment}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {app_config.app_name}
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
"""
        return k8s_manifest

    def generate_terraform_config(self, resources: List[str]) -> str:
        """
        Generate Terraform infrastructure as code

        🎯 Demo Prompt: "Create AWS infrastructure for a scalable web application"
        """
        terraform_config = """
# Generated by Copilot Cloud Extension
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = var.aws_region
}

# VPC Configuration
resource "aws_vpc" "main" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = {
    Name = "copilot-demo-vpc"
  }
}

# Internet Gateway
resource "aws_internet_gateway" "main" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "copilot-demo-igw"
  }
}

# Public Subnets
resource "aws_subnet" "public" {
  count             = 2
  vpc_id            = aws_vpc.main.id
  cidr_block        = "10.0.${count.index + 1}.0/24"
  availability_zone = data.aws_availability_zones.available.names[count.index]

  map_public_ip_on_launch = true

  tags = {
    Name = "copilot-demo-public-${count.index + 1}"
  }
}

# ECS Cluster
resource "aws_ecs_cluster" "main" {
  name = "copilot-demo-cluster"

  setting {
    name  = "containerInsights"
    value = "enabled"
  }
}

# Application Load Balancer
resource "aws_lb" "main" {
  name               = "copilot-demo-alb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.alb.id]
  subnets            = aws_subnet.public[*].id

  enable_deletion_protection = false
}
"""
        return terraform_config

# ============================================================================
# OBSERVABILITY AND MONITORING EXTENSIONS
# ============================================================================

class ObservabilityIntegration:
    """
    Demonstrates integration with monitoring and observability tools
    """

    def generate_prometheus_config(self, services: List[str]) -> str:
        """
        Generate Prometheus monitoring configuration

        🎯 Demo Prompt: "Set up monitoring for my microservices with alerts"
        """
        prometheus_config = """
# Generated by Copilot Observability Extension
global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  - "alert_rules.yml"

alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  - job_name: 'application'
    metrics_path: '/metrics'
    static_configs:
      - targets: ['app:5000']
    scrape_interval: 5s

  - job_name: 'redis'
    static_configs:
      - targets: ['redis:6379']

  - job_name: 'postgres'
    static_configs:
      - targets: ['postgres:5432']
"""
        return prometheus_config

    def generate_grafana_dashboard(self, metrics: List[str]) -> Dict[str, Any]:
        """
        Generate Grafana dashboard configuration

        🎯 Demo Prompt: "Create monitoring dashboard for application performance"
        """
        dashboard = {
            "dashboard": {
                "id": None,
                "title": "Application Performance - Generated by Copilot",
                "tags": ["copilot", "performance"],
                "timezone": "browser",
                "refresh": "5s",
                "panels": [
                    {
                        "id": 1,
                        "title": "Request Rate",
                        "type": "graph",
                        "targets": [
                            {
                                "expr": "rate(http_requests_total[5m])",
                                "legendFormat": "{{method}} {{status}}"
                            }
                        ],
                        "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
                    },
                    {
                        "id": 2,
                        "title": "Response Time",
                        "type": "graph",
                        "targets": [
                            {
                                "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))",
                                "legendFormat": "95th percentile"
                            }
                        ],
                        "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
                    }
                ]
            }
        }
        return dashboard

# ============================================================================
# DEMO INSTRUCTIONS AND EXTENSION PROMPTS
# ============================================================================

"""
🎯 DEMO INSTRUCTIONS FOR PRESENTER:

1. **Setup Extensions Demo**:
   - Show that Copilot can work with multiple external tools
   - Explain natural language interface to DevOps tools

2. **Docker Extension Demo**:

   Ask Copilot:
   - "Create a Dockerfile for my Python Flask app with PostgreSQL"
   - "Generate docker-compose for microservices with Redis and database"
   - "Optimize Docker image for production deployment"

3. **Postman/API Testing Demo**:

   Ask Copilot:
   - "Create comprehensive API tests for user authentication"
   - "Generate load tests for my REST API endpoints"
   - "Set up automated API testing pipeline"

4. **Cloud Deployment Demo**:

   Ask Copilot:
   - "Deploy my application to Kubernetes with auto-scaling"
   - "Create AWS infrastructure using Terraform"
   - "Set up CI/CD pipeline for automated deployment"

5. **Monitoring Setup Demo**:

   Ask Copilot:
   - "Configure Prometheus monitoring for my services"
   - "Create Grafana dashboard for application metrics"
   - "Set up alerting for critical system failures"

6. **Multi-Tool Orchestration**:

   Ask Copilot:
   - "Set up complete DevOps pipeline from code to production"
   - "Create infrastructure, deploy app, and configure monitoring"
   - "Generate documentation for the entire setup"

Expected Extension Behaviors:
✅ Translates natural language to tool-specific configurations
✅ Understands relationships between different tools
✅ Generates complete, runnable configurations
✅ Includes best practices and security considerations
✅ Provides deployment and operational guidance
✅ Suggests appropriate monitoring and alerting
"""

# Extension integration prompts for demo
EXTENSION_DEMO_PROMPTS = [
    "Create complete Docker setup for microservices architecture",
    "Generate comprehensive API test suite with performance testing",
    "Deploy application to cloud with auto-scaling and monitoring",
    "Set up CI/CD pipeline with quality gates and security scanning",
    "Configure observability stack with metrics, logs, and traces",
    "Create infrastructure as code for multi-environment deployment",
    "Set up database migrations and backup strategies",
    "Implement blue-green deployment with rollback capabilities",
    "Configure service mesh for microservices communication",
    "Set up disaster recovery and high availability architecture"
]

# Available Copilot extensions to demonstrate
AVAILABLE_EXTENSIONS = {
    "docker": "Container management and orchestration",
    "postman": "API testing and validation",
    "aws": "Cloud infrastructure and deployment",
    "azure": "Microsoft Azure services integration",
    "gcp": "Google Cloud Platform resources",
    "kubernetes": "Container orchestration and management",
    "terraform": "Infrastructure as code",
    "prometheus": "Monitoring and alerting",
    "grafana": "Observability and dashboards",
    "github_actions": "CI/CD pipeline automation"
}

if __name__ == "__main__":
    print("🔧 GitHub Copilot Extensions & Tool Integration Demo")
    print("===================================================")
    print("This demo shows Copilot's integration with external tools.")
    print(f"\n🛠️ Available Extensions: {len(AVAILABLE_EXTENSIONS)}")
    for ext, desc in AVAILABLE_EXTENSIONS.items():
        print(f"   • {ext}: {desc}")

    print("\n🎯 Try asking Copilot to:")
    for prompt in EXTENSION_DEMO_PROMPTS[:4]:
        print(f"   • {prompt}")

    print("\n✨ Natural language interface to your entire DevOps toolchain!")
    print("   - Docker containerization")
    print("   - API testing automation")
    print("   - Cloud deployment")
    print("   - Infrastructure as code")
    print("   - Monitoring and observability")
